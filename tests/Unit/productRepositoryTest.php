<?php

namespace Hsy\Store\Tests;


use Hsy\Store\Models\Product;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Hsy\Store\Facades\Store;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;

class productRepositoryTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->defineRouter();
    }

    public function testCreateProduct()
    {
        $this->withoutExceptionHandling();

        $tags = ["foo one", "bar two"];
        $file = UploadedFile::fake()->image("image")->size(100);

        $data = [
            "title" => "new Product",
            "body" => "test body",
            "category_id" => 1,
            "price" => 100000,
            "tags" => $tags,
            "cover_image" => $file
        ];

        $product_id =
            $this->post("/products", $data)
                ->json("product_id");

        /**
         * @var Product $product
         */
        $product = Product::find($product_id);

        $this->assertDatabaseCount("products", 1);
        $this->assertEquals($product->getTags(), $tags);
        $this->assertCount(1, $product->getMedia("cover_image"));
    }

    public function testUpdateProduct()
    {
        $product = factory(Product::class)->create();

        $newTitle = "New Title ...";
        Store::products()->store(["title" => $newTitle], $product);

        $this->assertEquals(Product::all()->first()->title, $newTitle);
    }

    private function defineRouter()
    {
        $this->app['router']->prefix("products")->group(function ($router) {

            $router->post('/', function (Request $request) {
                $product = Store::products()->store($request->all());
                return response()->json(["product_id" => $product->id]);
            });

        });
    }


    public function testFilter()
    {
        $data = [
            [
                "title" => "Product-1",
                "body" => "there is some description about my product as Samsung Mobile Phone",
                "category_id" => 1,
                "price" => 100000,
                "tags" => ["tag-1", "tag-2", "tag-3"]
            ],
            [
                "title" => "Product-2",
                "body" => "there is some description about my product as Apple Mobile Phone",
                "category_id" => 2,
                "price" => 200000,
                "tags" => ["tag-2", "tag-3", "tag-4"]
            ],
            [
                "title" => "Product-3",
                "body" => "there is some description about my product as Nokia Mobile Phone",
                "category_id" => 2,
                "price" => 300000,
                "tags" => ["tag-5", "tag-6", "tag-7"]
            ],

        ];

        foreach ($data as $productData) {
            Store::products()->store($productData);
        }

        $products = Store::products()->withoutPagination()
            ->filter("samsung")->get();
        $this->assertCount(1, $products);

        $products = Store::products()->withoutPagination()
            ->hasAnyTags(["tag-1"])->get();
        $this->assertCount(1, $products);

        $products = Store::products()->withoutPagination()
            ->hasAnyTags(["tag-1","tag-2"])->get();
        $this->assertCount(2, $products);
        
        $products = Store::products()->withoutPagination()
            ->hasAllTags(["tag-1","tag-2"])->get();
        $this->assertCount(1, $products);

    }

}
